name: Scheduled version update

permissions:
  contents: write
  pull-requests: write

on: workflow_dispatch

jobs:
  update-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: main
          fetch-depth: 0

      - name: Get last commit SHA
        id: current_sha
        run: |
          CURRENT_SHA=$(git log -n 1 --no-merges --pretty=format:"%H")
          echo "last commit SHA : $CURRENT_SHA"
          echo "current_sha=$CURRENT_SHA" >> $GITHUB_OUTPUT

      - name: Get last version tag and SHA
        id: last_tag
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          TAG_SHA=$(git rev-list -n 1 "$LAST_TAG")
          echo "Last version SHA : $TAG_SHA"
          echo "tag_sha=$TAG_SHA" >> $GITHUB_OUTPUT
          echo "Last version tag : $LAST_TAG"
          echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT

      - name: Compare SHAs
        id: compare
        run: |
          if [ "${{ steps.current_sha.outputs.current_sha }}" = "${{ steps.last_tag.outputs.tag_sha }}" ]; then
            echo "No new commit since version. Exiting."
            exit 0
          fi

      - name: Get version from changelog
        id: changelog_version
        run: |
          FILE_VERSION=$(grep -m1 '^## ' CHANGELOG.md | sed -E 's/^## ([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          echo "Last version in changelog : $FILE_VERSION"
          echo "file_version=$FILE_VERSION" >> $GITHUB_OUTPUT

      - name: Determine version to use
        id: determine_version
        run: |
          RAW_TAG="${{ steps.last_tag.outputs.last_tag }}"
          RAW_TAG="${RAW_TAG#v}"
          
          IFS='.' read -r MAJOR LAST_MINOR LAST_PATCH <<< "$RAW_TAG"
          IFS='.' read -r FILE_MAJOR FILE_MINOR FILE_PATCH <<< "${{ steps.changelog_version.outputs.file_version }}"
          
          if [ "$FILE_MAJOR" -gt "$MAJOR" ] || \
             [ "$FILE_MAJOR" -eq "$MAJOR" -a "$FILE_MINOR" -gt "$LAST_MINOR" ] || \
             [ "$FILE_MAJOR" -eq "$MAJOR" -a "$FILE_MINOR" -eq "$LAST_MINOR" -a "$FILE_PATCH" -gt "$LAST_PATCH" ]; then
              NEW_VERSION="${{ steps.changelog_version.outputs.file_version }}"
          else
              PATCH=$((LAST_PATCH + 1))
              NEW_VERSION="$MAJOR.$LAST_MINOR.$PATCH"
          fi
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create PR branch
        run: |
          git config user.name 'github-actions'
          git config user.email 'github-actions@github.com'
          
          #Update pom public
          NEW_VERSION="${{ steps.determine_version.outputs.new_version }}"
          sed -i -E "/<artifactId>kraftwerk<\/artifactId>/{n;s|<version>[0-9]+\.[0-9]+\.[0-9]+</version>|<version>$NEW_VERSION</version>|;}" pom-public.xml
          git add pom-public.xml
          git commit -m "chore: Update pom public version to $NEW_VERSION"
          
          # Update TODO to today in changelog
          TODAY=$(date +%Y-%m-%d)
          if grep -q '\[TODO\]' CHANGELOG.md; then
            sed -i "0,/\[TODO\]/s/\[TODO\]/[$TODAY]/" CHANGELOG.md
            git add CHANGELOG.md
            git commit -m "doc: Update CHANGELOG date"
          else
            echo "No change done in changelog"
          fi

      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: "main"
          commit-message: "Update for release ${{ steps.determine_version.outputs.new_version }}"
          branch: "update-version-${{ steps.determine_version.outputs.new_version }}"
          branch-suffix: timestamp
          title: "Auto release ${{ steps.determine_version.outputs.new_version }}"
          body: "This PR updates the application to version ${{ steps.determine_version.outputs.new_version }}."

      - name: Label Pull Request
        id: label_pr
        if: steps.create_pr.outputs.pull-request-number != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ steps.create_pr.outputs.pull-request-number }}
          LABEL_NAME: "Version Update - Prod"
        run: |
          echo "Adding label '$LABEL_NAME' to PR #$PR_NUMBER in $REPO"
          
          # Appel API pour ajouter le(s) label(s)
          resp=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/issues/$PR_NUMBER/labels" \
            -d "{\"labels\":[\"$LABEL_NAME\"]}")
          
          http_status=$(echo "$resp" | tail -n1)
          body=$(echo "$resp" | sed '$d')
          
          if [ "$http_status" -ge 200 ] && [ "$http_status" -lt 300 ]; then
            echo "Label ajouté avec succès."
            echo "$body"
          else
            echo "Erreur lors de l'ajout du label (HTTP $http_status):"
            echo "$body"
            exit 1
          fi

      - name: Wait 10s for PR checks
        run: sleep 10s
        shell: bash

      #- name: Enable Pull Request Automerge
      #  run: gh pr merge --merge --auto "${{ steps.create_pr.outputs.pull-request-number }}"
      #  env:
      #    GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}